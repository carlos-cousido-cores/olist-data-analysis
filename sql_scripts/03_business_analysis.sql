/*
===============================================================================
BUSINESS QUESTIONS
===============================================================================
Purpose:
    To define the key business questions that this data analysis project aims to answer. 
	These questions will guide the exploration of the Olist dataset to uncover valuable insights related to revenue, 
	customer behavior, product performance, and seller activity, ultimately informing strategic business decisions.

List of questions:
1: What is the total revenue generated by Olist, and how has it changed over time?
2: How many orders were placed on Olist, and how does this vary by month or season?
3: How accurately are orders delivered compared to their estimated delivery dates?
4: What are the most popular product categories on Olist, and how do their sales volumes compare to each other?
5: What are the top-selling products on Olist, and how have their sales trends changed over time?
6: What is the average order value (AOV) on Olist, and how does this vary by product category or payment method?
7: How many sellers are active on Olist, and how does this number change over time?
8: What is the distribution of seller ratings on Olist, and how does this impact sales performance?
9: How many customers have made repeat purchases on Olist, and what percentage of total sales do they account for?
10: What is the average customer rating for products sold on Olist, and how does this impact sales performance?
11: What is the average and monthly trend of 5-star review rates?
12: What is the average order cancellation rate on Olist, and how does this impact seller performance?
13: Which payment methods are most commonly used by Olist customers, and how does this vary by product category or geographic region?
14: How accurately do item prices and freight values reflect the actual payment amounts received from customers, and 
    what is the average discrepancy between expected and actual revenue per order?
15: Geolocation has high customer density. Calculate customer retention rate according to geolocations
===============================================================================
*/


/*
===============================================================================
Business Question 1:
What is the total revenue generated by Olist, and how has it changed over time?
===============================================================================
*/

-- One order does not have an associated payment record
-- order_id = 'bfbd0f9bdef84302105ad712db648a6c'
SELECT o.order_id AS order_id,
	   SUM(p.payment_value) AS payment_value
FROM dbo.olist_orders_dataset o 
LEFT JOIN dbo.olist_order_payments_dataset p ON o.order_id = p.order_id
GROUP BY o.order_id
HAVING SUM(p.payment_value) IS NULL;

-- Finding that order
SELECT *
FROM dbo.olist_orders_dataset
WHERE order_id = 'bfbd0f9bdef84302105ad712db648a6c'; -- that order was delivered

-- Total revenue: R$ 15,421,083
SELECT 
	ROUND(SUM(p.payment_value), 0) total_revenue
FROM dbo.olist_order_payments_dataset p 
INNER JOIN dbo.olist_orders_dataset o ON p.order_id = o.order_id
WHERE o.order_status != 'canceled' AND 
	  o.order_delivered_customer_date IS NOT NULL;

-- Quarterly revenue increased in every quarter except for the last one (the third quarter of 2018), which only includes data for July and August
-- Best quarter: Q2 2018
SELECT 
	YEAR(o.order_purchase_timestamp) AS year,
	DATEPART(quarter, o.order_purchase_timestamp) AS quarter,
	ROUND(SUM(p.payment_value), 0) total_revenue
FROM dbo.olist_order_payments_dataset p 
INNER JOIN dbo.olist_orders_dataset o ON p.order_id = o.order_id
WHERE o.order_status != 'canceled' AND 
	  o.order_delivered_customer_date IS NOT NULL
GROUP BY DATEPART (QUARTER, o.order_purchase_timestamp), YEAR(o.order_purchase_timestamp)
ORDER BY year, quarter;

-- Monthly revenue shows an overall ascending trend
-- Best Month: November 2017
SELECT 
	FORMAT(o.order_purchase_timestamp, 'MMMM-yyyy') AS month_year,
	ROUND(SUM(p.payment_value), 0) total_revenue
FROM dbo.olist_order_payments_dataset p 
INNER JOIN dbo.olist_orders_dataset o ON p.order_id = o.order_id
WHERE o.order_status != 'canceled' AND 
	  o.order_delivered_customer_date IS NOT NULL
GROUP BY FORMAT(o.order_purchase_timestamp, 'MMMM-yyyy')
ORDER BY MIN(o.order_purchase_timestamp); -- for proper chronological sorting


/*
===============================================================================
Business Question 2:
How many orders were placed on Olist, and how does this vary by month or season?
===============================================================================
*/

-- Total orders: 96470 (including the order without a payment)
SELECT 
	COUNT(order_id) AS total_orders
FROM dbo.olist_orders_dataset
WHERE order_status != 'canceled' AND 
      order_delivered_customer_date IS NOT NULL;

/*
Total orders by season
- Best season: Fall 2018

SeasonS in Brazil:
- Summer: December-February
- Fall: March-May
- Winter: June-August
- Spring: September-November
*/
SELECT 
	YEAR(order_purchase_timestamp) AS year,
	CASE 
		WHEN MONTH(order_purchase_timestamp) IN (12, 1, 2) THEN 'Summer'
		WHEN MONTH(order_purchase_timestamp) IN (3, 4, 5) THEN 'Fall'
		WHEN MONTH(order_purchase_timestamp) IN (6, 7, 8)  THEN 'Winter'
		ELSE 'Spring'
	END AS season,
    CASE 
        WHEN MONTH(order_purchase_timestamp) IN (12, 1, 2) THEN 1
        WHEN MONTH(order_purchase_timestamp) IN (3, 4, 5) THEN 2
        WHEN MONTH(order_purchase_timestamp) IN (6, 7, 8) THEN 3
        ELSE 4
    END AS season_order,
	COUNT(order_id) AS total_orders
FROM dbo.olist_orders_dataset
WHERE order_status != 'canceled' AND 
      order_delivered_customer_date IS NOT NULL
GROUP BY
	YEAR(order_purchase_timestamp), 
	CASE 
		WHEN MONTH(order_purchase_timestamp) IN (12, 1, 2) THEN 'Summer'
	    WHEN MONTH(order_purchase_timestamp) IN (3, 4, 5) THEN 'Fall'
	    WHEN MONTH(order_purchase_timestamp) IN (6, 7, 8)  THEN 'Winter'
	    ELSE 'Spring'
	END,
	CASE 
        WHEN MONTH(order_purchase_timestamp) IN (12, 1, 2) THEN 1
        WHEN MONTH(order_purchase_timestamp) IN (3, 4, 5) THEN 2
        WHEN MONTH(order_purchase_timestamp) IN (6, 7, 8) THEN 3
        ELSE 4
    END
ORDER BY year, season_order;

-- Total orders by quarter 
-- Best quarter: Q1 2018
SELECT 
	YEAR(order_purchase_timestamp) AS year,
	DATEPART(quarter, order_purchase_timestamp) AS quarter,
	COUNT(order_id) AS total_orders
FROM dbo.olist_orders_dataset
WHERE order_status != 'canceled' AND 
      order_delivered_customer_date IS NOT NULL
GROUP BY YEAR(order_purchase_timestamp), DATEPART(quarter, order_purchase_timestamp)
ORDER BY year, quarter;

-- Total orders by month
-- Best month: November 2017
SELECT
	FORMAT(order_purchase_timestamp, 'MMMM-yyyy') AS month_year,
	COUNT(order_id) AS total_orders
FROM dbo.olist_orders_dataset
WHERE order_status != 'canceled' AND 
      order_delivered_customer_date IS NOT NULL
GROUP BY FORMAT(order_purchase_timestamp, 'MMMM-yyyy')
ORDER BY MIN(order_purchase_timestamp);

-- Total orders by day
-- Best day: Black Friday (2017-11-24)
SELECT 
	FORMAT(order_purchase_timestamp, 'yyyy-MM-dd') AS date_purchase,
	COUNT(order_id) AS total_orders
FROM dbo.olist_orders_dataset
WHERE order_status != 'canceled' AND 
      order_delivered_customer_date IS NOT NULL
GROUP BY FORMAT(order_purchase_timestamp, 'yyyy-MM-dd')
ORDER BY total_orders DESC;


/*
===============================================================================
Business Question 3:
How accurately are orders delivered compared to their estimated delivery dates?
===============================================================================
*/

-- Late orders vs Early orders vs On-time orders
-- Almost 92% of orders are not delivered on the estimated date
WITH total_delivered_orders AS (
	SELECT 
		COUNT(*) AS total_orders
	FROM dbo.olist_orders_dataset
	WHERE order_status != 'canceled' AND 
		  order_delivered_customer_date IS NOT NULL
),
late_delivery AS (
	SELECT 
		COUNT(*) AS late_orders
	FROM dbo.olist_orders_dataset
	WHERE order_status != 'canceled' AND 
		  order_delivered_customer_date IS NOT NULL AND
		  DATEDIFF(DAY, order_delivered_customer_date, order_estimated_delivery_date) > 0
),
early_delivery AS (
SELECT 
	COUNT(*) AS early_orders
FROM dbo.olist_orders_dataset
WHERE order_status != 'canceled' AND 
	  order_delivered_customer_date IS NOT NULL AND
	  DATEDIFF(DAY, order_delivered_customer_date, order_estimated_delivery_date) < 0
),
on_time_delivery AS (
	SELECT 
		COUNT(*) AS on_time_orders
	FROM dbo.olist_orders_dataset
	WHERE order_status != 'canceled' AND 
		  order_delivered_customer_date IS NOT NULL AND
		  DATEDIFF(DAY, order_delivered_customer_date, order_estimated_delivery_date) = 0
)
SELECT 
	total_orders,
	late_orders,
	early_orders,
	on_time_orders,
	ROUND(100 * CAST(late_orders AS FLOAT) / total_orders, 2) AS prcnt_late_orders,
	ROUND(100 * CAST(early_orders AS FLOAT) / total_orders, 2) AS prcnt_early_orders,
	ROUND(100 * CAST(on_time_orders AS FLOAT) / total_orders, 2) AS prcnt_on_time_orders
FROM total_delivered_orders
CROSS JOIN late_delivery
CROSS JOIN early_delivery
CROSS JOIN on_time_delivery;


/*
===============================================================================
Business Question 4:
What are the most popular product categories on Olist, and how do their sales volumes compare to each other?
===============================================================================
*/

-- There is one product in olist_order_items_dataset that is not in the products dataset 
-- That product has 2 different prices and one unique seller
SELECT
	COUNT(DISTINCT oi.price) AS unique_prices,
	COUNT(DISTINCT oi.product_id) unique_products,
	COUNT(DISTINCT oi.seller_id) unique_sellers
FROM dbo.olist_order_items_dataset oi 
LEFT JOIN dbo.olist_products_dataset_clean p ON oi.product_id = p.product_id
WHERE p.product_id IS NULL;

-- Finding that product: there are 17 purchases of that product
-- product_id = '5eb564652db742ff8f28759cd8d2652a'
-- Two price points observed: R$ 29 and R$ 39
SELECT
	*
FROM dbo.olist_order_items_dataset oi 
LEFT JOIN dbo.olist_products_dataset_clean p ON oi.product_id = p.product_id
WHERE p.product_id IS NULL; 

-- Total products purchased: 110189
SELECT 
	COUNT(*) AS total_products
FROM dbo.olist_order_items_dataset oi
LEFT JOIN dbo.olist_orders_dataset o ON o.order_id = oi.order_id
WHERE o.order_status != 'canceled' AND 
      o.order_delivered_customer_date IS NOT NULL;

-- Total products by category
SELECT 
	COALESCE(p.product_category_name_english, 'Unknown Product') AS product_name,
	COUNT(*) AS total_products,
	ROUND(100 * CAST(COUNT(*) AS FLOAT) / total_amount_product, 2) AS prcnt
FROM dbo.olist_order_items_dataset oi
LEFT JOIN dbo.olist_orders_dataset o ON o.order_id = oi.order_id
LEFT JOIN dbo.olist_products_dataset_clean p ON p.product_id = oi.product_id
CROSS JOIN (SELECT 
				COUNT(*) AS total_amount_product
	       FROM dbo.olist_order_items_dataset oi
	       LEFT JOIN dbo.olist_orders_dataset o ON o.order_id = oi.order_id
	       WHERE o.order_status != 'canceled' AND 
		         o.order_delivered_customer_date IS NOT NULL) AS total_amount_product
WHERE o.order_status != 'canceled' AND 
      o.order_delivered_customer_date IS NOT NULL
GROUP BY COALESCE(p.product_category_name_english, 'Unknown Product'), total_amount_product
ORDER BY total_products DESC;


/*
===============================================================================
Business Question 5:
What are the top-selling products on Olist, and how have their sales trends changed over time?
===============================================================================
*/

-- Revenue by product
SELECT
	COALESCE(pr.product_category_name_english, 'Unknown Product') AS product_name,
	ROUND(SUM(payment_value), 2) AS total_revenue,
	ROUND(100 * CAST(SUM(payment_value) AS FLOAT) / total_amount_revenue, 2) AS prcnt
FROM dbo.olist_order_payments_dataset op 
LEFT JOIN dbo.olist_order_items_dataset oi ON oi.order_id = op.order_id
LEFT JOIN dbo.olist_orders_dataset o ON o.order_id = op.order_id
LEFT JOIN dbo.olist_products_dataset_clean pr ON pr.product_id = oi.product_id
CROSS JOIN (SELECT 
               ROUND(SUM(p.payment_value), 0) total_amount_revenue
            FROM dbo.olist_order_payments_dataset p 
            INNER JOIN dbo.olist_orders_dataset o ON p.order_id = o.order_id
            WHERE o.order_status != 'canceled' AND 
	              o.order_delivered_customer_date IS NOT NULL) AS total_amount_revenue
WHERE order_item_id = 1 AND --  only one item per order to avoid duplication
      order_status != 'canceled' AND 
	  order_delivered_customer_date IS NOT NULL
GROUP BY COALESCE(pr.product_category_name_english, 'Unknown Product'), total_amount_revenue
ORDER BY total_revenue DESC;

-- Revenue by product by year
SELECT
	COALESCE(pr.product_category_name_english, 'Unknown Product') AS product_name,
	ROUND(SUM(payment_value), 2) AS total_revenue,
	YEAR(o.order_purchase_timestamp) AS year
FROM dbo.olist_order_payments_dataset op 
LEFT JOIN dbo.olist_order_items_dataset oi ON oi.order_id = op.order_id
LEFT JOIN dbo.olist_orders_dataset o ON o.order_id = op.order_id
LEFT JOIN dbo.olist_products_dataset_clean pr ON pr.product_id = oi.product_id
WHERE order_item_id = 1 AND --  only one item per order to avoid duplication
      order_status != 'canceled' AND 
	  order_delivered_customer_date IS NOT NULL
	  --AND YEAR(o.order_purchase_timestamp) = 2018 -- filter by year
GROUP BY COALESCE(pr.product_category_name_english, 'Unknown Product'), YEAR(o.order_purchase_timestamp)
ORDER BY total_revenue DESC;


/*
===============================================================================
Business Question 6:
What is the average order value (AOV) on Olist, and how does this vary by product category or payment method?
===============================================================================
*/

-- AOV = R$ 160
WITH base_payment_orders AS (
	SELECT
		o.order_id AS order_id,
		SUM(p.payment_value) AS payment_value
	FROM dbo.olist_order_payments_dataset p
	LEFT JOIN dbo.olist_orders_dataset o ON o.order_id = p.order_id
	WHERE o.order_status != 'canceled' AND 
		  o.order_delivered_customer_date IS NOT NULL
	GROUP BY o.order_id -- total rows: 96,469, total payment value: 15,421,083
)
SELECT 
	ROUND(SUM(payment_value) / COUNT(*), 0) AS aov
FROM base_payment_orders;

-- AOV by product category
SELECT 
    COALESCE(pr.product_category_name_english, 'Unknown Product') AS product_name,
	ROUND(SUM(op.payment_value), 0) AS total_revenue,
	COUNT(DISTINCT o.order_id) AS total_orders,
	ROUND(SUM(op.payment_value) / COUNT(DISTINCT o.order_id), 0) AS aov
FROM dbo.olist_order_payments_dataset op 
LEFT JOIN dbo.olist_order_items_dataset oi ON oi.order_id = op.order_id
LEFT JOIN dbo.olist_orders_dataset o ON o.order_id = op.order_id
LEFT JOIN dbo.olist_products_dataset_clean pr ON pr.product_id = oi.product_id
WHERE o.order_status != 'canceled' AND 
	  o.order_delivered_customer_date IS NOT NULL AND
	  oi.order_item_id = 1 --  only one item per order to avoid duplication
GROUP BY COALESCE(pr.product_category_name_english, 'Unknown Product')
ORDER BY aov DESC;

-- AOV by payment type: this option overcounts number of orders since one order could have more that one payment type
SELECT 
	payment_type,
	COUNT(DISTINCT o.order_id) AS total_orders,
	ROUND(SUM(p.payment_value), 0) AS total_revenue,
	ROUND(SUM(p.payment_value) / COUNT(DISTINCT o.order_id), 0) AS aov
FROM dbo.olist_orders_dataset o
INNER JOIN dbo.olist_order_payments_dataset p ON p.order_id = o.order_id
WHERE o.order_status != 'canceled' AND 
      o.order_delivered_customer_date IS NOT NULL
GROUP BY payment_type
ORDER BY aov DESC;

/*
-- AOV by the main payment type: this option select the payment option with the highest value, so we have one payment type per order
-- The downfall is that the revenue is going to be lower but only but around 1% 
	- loss = 15,421,083 - 15,274,110 = 146,973
	- percentage_loss = (146,973 / 15,421,083) * 100 = 0.95%
*/
WITH primary_payment AS (
    SELECT 
        order_id,
        payment_type,
        payment_value,
        ROW_NUMBER() OVER (PARTITION BY order_id ORDER BY payment_value DESC) AS rn
    FROM dbo.olist_order_payments_dataset
)
SELECT 
    p.payment_type,
    COUNT(DISTINCT o.order_id) AS total_orders,
    ROUND(SUM(p.payment_value), 0) AS total_revenue,
    ROUND(SUM(p.payment_value) / COUNT(DISTINCT o.order_id), 0) AS aov
FROM dbo.olist_orders_dataset o
INNER JOIN primary_payment p ON o.order_id = p.order_id AND p.rn = 1
WHERE o.order_status != 'canceled' AND 
      o.order_delivered_customer_date IS NOT NULL
GROUP BY p.payment_type
ORDER BY aov DESC;


/*
===============================================================================
Business Question 7:
How many sellers are active on Olist, and how does this number change over time?
===============================================================================
*/

-- A seller is counted as "active" if they make a sale within 30 days of their previous sale
-- A seller is considered "active" if their latest sale occurred within 30 days of their prior sale
-- 1,898 active sellers 
WITH seller_order_dates AS (
	SELECT 
		o.order_id,
		s.seller_id,
		o.order_purchase_timestamp,
		LAG(o.order_purchase_timestamp, 1) OVER (PARTITION BY oi.seller_id ORDER BY o.order_purchase_timestamp) AS previous_order_date
	FROM dbo.olist_order_items_dataset oi
	LEFT JOIN dbo.olist_sellers_dataset s ON s.seller_id = oi.seller_id
	LEFT JOIN dbo.olist_orders_dataset o ON o.order_id = oi.order_id
	WHERE o.order_status != 'canceled' AND 
		  o.order_delivered_customer_date IS NOT NULL
)
SELECT 
	seller_id,
	DATEDIFF(DAY, MAX(previous_order_date), MAX(order_purchase_timestamp)) AS days_between_orders
FROM seller_order_dates
GROUP BY seller_id
HAVING DATEDIFF(DAY, MAX(previous_order_date), MAX(order_purchase_timestamp)) <= 30 AND 
       DATEDIFF(DAY, MAX(previous_order_date), MAX(order_purchase_timestamp)) IS NOT NULL
ORDER BY days_between_orders DESC;

-- Change over time of active sellers
WITH seller_order_dates AS (
    SELECT
        oi.seller_id,
        o.order_purchase_timestamp,
        LAG(o.order_purchase_timestamp) OVER (PARTITION BY oi.seller_id ORDER BY o.order_purchase_timestamp) AS previous_order_date
    FROM dbo.olist_order_items_dataset oi
    LEFT JOIN dbo.olist_orders_dataset o ON o.order_id = oi.order_id
    WHERE o.order_status != 'canceled' AND 
	      o.order_delivered_customer_date IS NOT NULL
),
recent_seller_gap AS (
    SELECT 
        seller_id,
		MAX(previous_order_date) AS previous_order_date,
        MAX(order_purchase_timestamp) AS last_order_date,
        DATEDIFF(DAY, MAX(previous_order_date), MAX(order_purchase_timestamp)) AS days_between_orders
    FROM seller_order_dates
    GROUP BY seller_id
    HAVING DATEDIFF(DAY, MAX(previous_order_date), MAX(order_purchase_timestamp)) <= 30 AND 
	       DATEDIFF(DAY, MAX(previous_order_date), MAX(order_purchase_timestamp)) IS NOT NULL
)
SELECT
    YEAR(last_order_date) AS year,
    DATEPART(QUARTER, last_order_date) AS quarter,
    MONTH(last_order_date) AS month,
    COUNT(seller_id) AS active_seller_order_count
FROM recent_seller_gap
GROUP BY
    YEAR(last_order_date),
    DATEPART(QUARTER, last_order_date),
    MONTH(last_order_date)
ORDER BY
    year, quarter, month;


/*
===============================================================================
Business Question 8:
What is the distribution of seller ratings on Olist, and how does this impact sales performance?
===============================================================================
*/

-- Ratings by number of orders
SELECT 
	r.review_score,
	COUNT(*) AS total_orders
FROM dbo.olist_order_items_dataset oi
INNER JOIN dbo.olist_orders_dataset o ON o.order_id = oi.order_id
INNER JOIN dbo.olist_order_reviews_dataset_clean r ON r.order_id = oi.order_id 
WHERE o.order_status != 'canceled' AND 
      o.order_delivered_customer_date IS NOT NULL and
	  oi.order_item_id = 1 -- 95,824 orders
GROUP BY r.review_score
ORDER BY total_orders DESC;

-- Ratings by sellers
-- Almost 57% of sellers have a 4 star score
WITH seller_review_score AS (
	SELECT 
		seller_id,
		AVG(review_score) AS review_score
	FROM dbo.olist_order_items_dataset oi
	INNER JOIN dbo.olist_orders_dataset o ON o.order_id = oi.order_id
	INNER JOIN dbo.olist_order_reviews_dataset_clean r ON r.order_id = oi.order_id 
	WHERE o.order_status != 'canceled' AND 
		  o.order_delivered_customer_date IS NOT NULL and
		  oi.order_item_id = 1
	GROUP BY seller_id -- 2956 sellers
)
SELECT
	review_score,
	COUNT(*) AS total_sellers
FROM seller_review_score
GROUP BY review_score
ORDER BY total_sellers DESC;

-- Ratings distribution by number of orders and revenue
-- 1. Get orders by scores
WITH order_review_scores as (
	SELECT 
	   o.order_id,
	   AVG(review_score) AS review_score
	FROM dbo.olist_orders_dataset o
	INNER JOIN dbo.olist_order_reviews_dataset_clean r ON r.order_id = o.order_id
	WHERE o.order_status != 'canceled' AND 
		  o.order_delivered_customer_date IS NOT NULL
	GROUP BY o.order_id -- 95,824 orders. There are 646 orders with no review
),
-- 2. Get orders by revenue
order_payments AS (
	SELECT 
		o.order_id,
		SUM(p.payment_value) AS total_revenue
	FROM dbo.olist_order_payments_dataset p 
	INNER JOIN dbo.olist_orders_dataset o ON p.order_id = o.order_id
	WHERE o.order_status != 'canceled' AND 
		  o.order_delivered_customer_date IS NOT NULL
	GROUP BY o.order_id
)
-- 3. Group orders by review score  
SELECT 
	review_score,
	COUNT(*) AS total_orders,
	ROUND(SUM(total_revenue), 2) AS total_revenue,
	ROUND(SUM(total_revenue) / COUNT(*), 2) AS avg_revenue
FROM order_review_scores rs
INNER JOIN order_payments op ON op.order_id = rs.order_id
GROUP BY review_score
ORDER BY total_revenue DESC;


/*
===============================================================================
Business Question 9:
How many customers have made repeat purchases on Olist, and what percentage of total sales do they account for?
===============================================================================
*/

-- Return customers: 2801
WITH return_customers AS (
	SELECT 
		customer_unique_id,
		COUNT(order_id) AS number_purchases
	FROM dbo.olist_orders_dataset o
	INNER JOIN dbo.olist_customers_dataset c ON c.customer_id = o.customer_id
	WHERE o.order_status != 'canceled' AND 
		  o.order_delivered_customer_date IS NOT NULL
	GROUP BY customer_unique_id
	HAVING COUNT(order_id) > 1
)
SELECT COUNT(number_purchases) AS total_return_customers
FROM return_customers;

-- Revenue of return customers: R$ 86,4357
WITH return_customers AS (
	SELECT 
		customer_unique_id,
		COUNT(order_id) AS number_purchases
	FROM dbo.olist_orders_dataset o
	INNER JOIN dbo.olist_customers_dataset c ON c.customer_id = o.customer_id
	WHERE order_status != 'canceled' AND 
		  order_delivered_customer_date IS NOT NULL
	GROUP BY customer_unique_id
	HAVING COUNT(order_id) > 1
),
customer_revenue AS (
SELECT
    customer_unique_id,
	SUM(payment_value) AS total_revenue
FROM dbo.olist_order_payments_dataset p
LEFT JOIN dbo.olist_orders_dataset o ON o.order_id = p.order_id
LEFT JOIN dbo.olist_customers_dataset c ON c.customer_id = o.customer_id
WHERE order_status != 'canceled' AND 
	  order_delivered_customer_date IS NOT NULL
GROUP BY customer_unique_id
)
SELECT 
	ROUND(SUM(total_revenue), 0) AS total_revenue_return_customers
FROM return_customers rc
LEFT JOIN customer_revenue cr ON cr.customer_unique_id = rc.customer_unique_id;

-- Return customers account for 5.61% of the total revenue
WITH return_customers AS (
	SELECT 
		customer_unique_id,
		COUNT(order_id) AS number_purchases
	FROM dbo.olist_orders_dataset o
	INNER JOIN dbo.olist_customers_dataset c ON c.customer_id = o.customer_id
	WHERE order_status != 'canceled' AND 
		  order_delivered_customer_date IS NOT NULL
	GROUP BY customer_unique_id
	HAVING COUNT(order_id) > 1
),
customer_revenue AS (
	SELECT
		customer_unique_id,
		SUM(payment_value) AS total_revenue
	FROM dbo.olist_order_payments_dataset p
	LEFT JOIN dbo.olist_orders_dataset o ON o.order_id = p.order_id
	LEFT JOIN dbo.olist_customers_dataset c ON c.customer_id = o.customer_id
	WHERE order_status != 'canceled' AND 
		  order_delivered_customer_date IS NOT NULL
	GROUP BY customer_unique_id
),
return_customer_revenue AS (
	SELECT 
		ROUND(SUM(total_revenue), 0) AS total_revenue_return_customers
	FROM return_customers rc
	LEFT JOIN customer_revenue cr ON cr.customer_unique_id = rc.customer_unique_id
),
total_customer_revenue AS (
	SELECT ROUND(SUM(total_revenue), 0) AS total_revenue
	FROM customer_revenue
)
SELECT ROUND(100 * total_revenue_return_customers / total_revenue, 2) AS prcnt_return_customer_revenue
FROM return_customer_revenue
CROSS JOIN total_customer_revenue;


/*
===============================================================================
Business Question 10:
What is the average customer rating for products sold on Olist, and how does this impact sales performance?
===============================================================================
*/

-- Average customer rating: 4
SELECT ROUND(AVG(r.review_score), 2) AS avg_review_score
FROM dbo.olist_orders_dataset o
INNER JOIN dbo.olist_order_reviews_dataset_clean r ON o.order_id = r.order_id
WHERE order_status != 'canceled' AND 
      order_delivered_customer_date IS NOT NULL; -- 95,824 ratings

-- Average customer rating by product category
-- Note: AOV by product category was already addressed in Business Question 5
SELECT
    COALESCE(pr.product_category_name_english, 'Unknown Product') AS product_name,
	ROUND(AVG(r.review_score), 2) AS avg_review_score,
	COUNT(DISTINCT o.order_id) AS total_orders,
	ROUND(SUM(p.payment_value), 2) AS total_revenue -- 15,421,083
FROM dbo.olist_orders_dataset o
INNER JOIN dbo.olist_order_payments_dataset p ON p.order_id = o.order_id
INNER JOIN dbo.olist_order_items_dataset oi ON oi.order_id = o.order_id
LEFT JOIN dbo.olist_order_reviews_dataset_clean r ON r.order_id = o.order_id
LEFT JOIN dbo.olist_products_dataset_clean pr ON pr.product_id = oi.product_id
WHERE o.order_status != 'canceled' AND 
      o.order_delivered_customer_date IS NOT NULL AND 
	  oi.order_item_id = 1 -- 100748
GROUP BY COALESCE(pr.product_category_name_english, 'Unknown Product')
ORDER BY total_revenue DESC;


/*
===============================================================================
Business Question 11:
What is the average and monthly trend of 5-star review rates?
===============================================================================
*/

-- Average 5-star review rate across all months: 60.32%
SELECT 
	AVG(ROUND(CAST(score_5 AS FLOAT) / CAST(count_all AS FLOAT) * 100, 0)) AS avg_prct_score_5
FROM (
	SELECT
		FORMAT(r.review_answer_timestamp, 'MMMM-yyyy') AS month_year, 
		SUM(CASE WHEN r.review_score = 5 THEN 1 ELSE 0 END) AS score_5,
		COUNT(r.order_id) AS count_all
	FROM dbo.olist_order_reviews_dataset_clean r
	INNER JOIN dbo.olist_orders_dataset o ON o.order_id = r.order_id
	WHERE o.order_status = 'delivered' AND 
		  o.order_delivered_customer_date IS NOT NULL
	GROUP BY FORMAT(r.review_answer_timestamp, 'MMMM-yyyy')) t;

-- Monthly trend of 5-star review rates
SELECT 
	month_year,
	score_5,
	count_all,
	ROUND(CAST(score_5 AS FLOAT) / CAST(count_all AS FLOAT) * 100, 2) AS prct_score_5
FROM (
	SELECT
		FORMAT(r.review_answer_timestamp, 'MMMM-yyyy') AS month_year,
		MIN(r.review_answer_timestamp) AS sort_column,  
		SUM(CASE WHEN r.review_score = 5 THEN 1 ELSE 0 END) AS score_5,
		COUNT(r.order_id) AS count_all
	FROM dbo.olist_order_reviews_dataset_clean r
	INNER JOIN dbo.olist_orders_dataset o ON r.order_id = o.order_id
	WHERE o.order_status = 'delivered' AND 
		  o.order_delivered_customer_date IS NOT NULL
	GROUP BY FORMAT(r.review_answer_timestamp, 'MMMM-yyyy')) t
ORDER BY sort_column ASC;


/*
===============================================================================
Business Question 12:
What is the average order cancellation rate on Olist, and how does this impact seller performance?
===============================================================================
*/

-- 625 orders were canceled
SELECT 
	order_status,
	COUNT(*) AS total_orders
FROM dbo.olist_orders_dataset
GROUP BY order_status
ORDER BY total_orders DESC;

-- Cancellation rate: 0.63%
SELECT
	ROUND(100 * COUNT(CASE WHEN order_status = 'canceled' THEN 1 END) / CAST(COUNT(*) AS FLOAT), 2) AS prcnt_cancelation
FROM dbo.olist_orders_dataset;

-- Seller performance
SELECT
	seller_id,
	COUNT(*) AS total_orders,
	COUNT(CASE WHEN o.order_status = 'canceled' THEN 1 END) AS total_canceled_orders,
	ROUND(100 * COUNT(CASE WHEN o.order_status = 'canceled' THEN 1 END) / CAST(COUNT(*) AS FLOAT), 2) AS prcnt_canceled_orders
FROM dbo.olist_orders_dataset o
INNER JOIN dbo.olist_order_items_dataset oi ON oi.order_id = o.order_id
WHERE oi.order_item_id = 1 -- Total orders: 98,666 // Canceled orders: 461 
GROUP BY seller_id
HAVING COUNT(CASE WHEN o.order_status = 'canceled' THEN 1 END) >= 1
ORDER BY prcnt_canceled_orders DESC;


/*
===============================================================================
Business Question 13:
Which payment methods are most commonly used by Olist customers, and how does this vary by product category or geographic region?
===============================================================================
*/

-- Total payments: 100748
-- Total revenue: 1542108283 
-- Credit card is the preferred payment type by far: it represents 74% of the total number of payments 
-- and 78.5% of the revenue
WITH payment_summary AS (
	SELECT
		p.payment_type,
		COUNT(*) AS number_payments,
		ROUND(SUM(p.payment_value), 2) AS revenue_payments
	FROM dbo.olist_order_payments_dataset p
	LEFT JOIN dbo.olist_orders_dataset o ON p.order_id = o.order_id
	WHERE o.order_status != 'canceled' AND 
		  o.order_delivered_customer_date IS NOT NULL
	GROUP BY p.payment_type
),
totals AS (
	SELECT 
		SUM(number_payments) AS total_count,
		SUM(revenue_payments) AS total_revenue
	FROM payment_summary
)
SELECT 
	p.payment_type,
	p.number_payments,
	p.revenue_payments,
	ROUND(100 * CAST(p.number_payments AS FLOAT) / CAST(t.total_count AS FLOAT), 2) AS prct_number_payments,
	ROUND(100 * CAST(p.revenue_payments AS FLOAT) / CAST(t.total_revenue AS FLOAT), 2) AS prct_revenue_payments
FROM payment_summary p
CROSS JOIN totals t
ORDER BY p.number_payments DESC;

-- Payment type by customer state including revenue and number of payments
SELECT
	p.payment_type,
	ROUND(SUM(p.payment_value), 2) AS total_revenue,
	COUNT(*) AS number_payments,
	customer_state
FROM dbo.olist_order_payments_dataset p
LEFT JOIN dbo.olist_orders_dataset o ON p.order_id = o.order_id
LEFT JOIN dbo.olist_customers_dataset c ON c.customer_id = o.customer_id
WHERE o.order_status != 'canceled' AND 
	  o.order_delivered_customer_date IS NOT NULL
GROUP BY payment_type, customer_state
ORDER BY number_payments DESC;

-- Payment type by customer state selecting the main payment 
-- by order to get the right number of orders
WITH main_payment_type AS (
SELECT	
	p.payment_type,
	o.order_id,
	customer_state,
	RANK() OVER(PARTITION BY o.order_id ORDER BY payment_value DESC) AS payment_rank
FROM dbo.olist_order_payments_dataset p
LEFT JOIN dbo.olist_orders_dataset o ON p.order_id = o.order_id
LEFT JOIN dbo.olist_customers_dataset c ON c.customer_id = o.customer_id
WHERE o.order_status != 'canceled' AND 
	  o.order_delivered_customer_date IS NOT NULL 
)
SELECT 
	payment_type,
	COUNT(DISTINCT order_id) AS number_orders,
	customer_state
FROM main_payment_type
WHERE payment_rank = 1
GROUP BY payment_type, customer_state
ORDER BY number_orders DESC;

-- Payment by product type
SELECT 
	product_category_name_english,
	p.payment_type,
	COUNT(*) AS number_payments,
	ROUND(SUM(p.payment_value), 2) AS total_revenue
FROM dbo.olist_order_payments_dataset p
LEFT JOIN dbo.olist_orders_dataset o ON p.order_id = o.order_id
LEFT JOIN dbo.olist_order_items_dataset oi ON oi.order_id = o.order_id
LEFT JOIN dbo.olist_products_dataset_clean pr ON pr.product_id = oi.product_id
WHERE o.order_status != 'canceled' AND 
	  o.order_delivered_customer_date IS NOT NULL AND
	  oi.order_item_id = 1
GROUP BY payment_type, product_category_name_english
ORDER BY number_payments DESC;


/*
===============================================================================
Business Question 14:
How accurately do item prices and freight values reflect the actual payment amounts received from customers, and 
what is the average discrepancy between expected and actual revenue per order?
===============================================================================
*/

WITH base_order_items AS (
	SELECT 
		order_id,
		MAX(order_item_id) AS total_items,
		SUM(price) AS total_price,
		SUM(freight_value) AS total_freight_value,
		SUM(price + freight_value) AS total_payment_items
	FROM dbo.olist_order_items_dataset
	GROUP BY order_id -- 98,666
),
base_order_payments AS (
	SELECT 
		order_id,
		COUNT(payment_sequential) AS count_payments,
		SUM(payment_value) AS total_payment
	FROM dbo.olist_order_payments_dataset
	GROUP BY order_id -- 99,440
),
both_tables AS (
SELECT 
	oi.order_id,
	oi.total_items,
	oi.total_price,
	oi.total_freight_value,
	oi.total_payment_items,
	op.count_payments,
	op.total_payment
FROM base_order_items oi
INNER JOIN base_order_payments op ON oi.order_id = op.order_id
INNER JOIN dbo.olist_orders_dataset o ON o.order_id = op.order_id
WHERE o.order_status != 'canceled' AND 
	  o.order_delivered_customer_date IS NOT NULL -- 96,469
)
SELECT 
	ROUND(SUM(total_payment_items), 2) AS expected_revenue,
	ROUND(SUM(total_payment), 2) AS  actual_revenue,
	ROUND(SUM(total_payment) - SUM(total_payment_items), 2) AS revenue_discrepancy, 
	ROUND((SUM(total_payment) - SUM(total_payment_items)) / NULLIF(SUM(total_payment_items), 0) * 100, 2) AS discrepancy_percentage
FROM both_tables;


/*
===============================================================================
Business Question 15:
Geolocation has high customer density. Calculate customer retention rate according to geolocations
===============================================================================
*/

-- Top 5 states by customer retention rate: AC, RO, MT, RJ, SP
WITH total_customers AS (
SELECT 
	customer_unique_id,
	customer_state,
	ROW_NUMBER() OVER (PARTITION BY customer_unique_id ORDER BY order_purchase_timestamp DESC) AS rank_purchase -- identify the most recent order per customer
FROM dbo.olist_orders_dataset o
INNER JOIN dbo.olist_customers_dataset c ON c.customer_id = o.customer_id
WHERE o.order_status != 'canceled' AND 
	  o.order_delivered_customer_date IS NOT NULL
),
rank_total_customers AS (
	SELECT
		customer_state,
		COUNT(DISTINCT customer_unique_id) AS total_customers
	FROM total_customers
	WHERE rank_purchase = 1 -- assign each customer to the state of their most recent purchase
	GROUP BY customer_state
),
rank_total_repeated_customers AS (
	SELECT
		customer_state,
		COUNT(DISTINCT customer_unique_id) AS repeated_customers
	FROM total_customers
	WHERE customer_unique_id IN (
								 SELECT 
									 customer_unique_id
								 FROM dbo.olist_orders_dataset o
								 INNER JOIN dbo.olist_customers_dataset c ON c.customer_id = o.customer_id
								 WHERE o.order_status != 'canceled' AND 
									   o.order_delivered_customer_date IS NOT NULL
								 GROUP BY customer_unique_id
								 HAVING COUNT(order_id) > 1) AND
		  rank_purchase = 1 -- assign each customer to the state of their most recent purchase
	GROUP BY customer_state
)
SELECT
	c.customer_state,
	total_customers,
	repeated_customers,
	ROUND(100 * CAST(repeated_customers AS FLOAT) / total_customers, 2) AS prcnt_retention_rate
FROM rank_total_customers c
INNER JOIN rank_total_repeated_customers rc ON rc.customer_state = c.customer_state
ORDER BY prcnt_retention_rate DESC;